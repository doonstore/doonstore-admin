<script>
    function onSignIn(googleUser) {
        const unsubscribe = firebase.auth().onAuthStateChanged(function (firebaseUser) {
            unsubscribe();
            const idToken = googleUser.getAuthResponse().id_token;
            if (!isUserEqual(googleUser, firebaseUser)) {
                const credential = firebase.auth.GoogleAuthProvider.credential(
                    idToken);
                firebase.auth().signInWithCredential(credential).catch(function (error) {
                    console.error("Authentication failed with error " + error);
                }).then(value => {
                    const email = googleUser.getBasicProfile().getEmail();

                    if (!getCookie("user") || getCookie("user") != email) {
                        setCookie("user", email, 1);
                        setCookie("token", idToken, 1);
                    }
                    window.location = '/admin';
                });
            } else {
                const email = googleUser.getBasicProfile().getEmail();

                if (!getCookie("user") || getCookie("user") != email) {
                    setCookie("user", email, 1);
                    setCookie("token", idToken, 1);
                }
                window.location = '/admin';
            }
        });
    }

    function signOut() {
        const auth2 = gapi.auth2.getAuthInstance();
        auth2.signOut().then(function () {
            if (getCookie("user")) {
                setCookie("user", "", -1);
            }
            if (getCookie("token")) {
                setCookie("token", "", -1);
            }
            window.location = '/';
        });
    }

    function isUserEqual(googleUser, firebaseUser) {
        if (firebaseUser) {
            const providerData = firebaseUser.providerData;
            for (let i = 0; i < providerData.length; i++) {
                if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &&
                    providerData[i].uid === googleUser.getBasicProfile().getId()) {
                    return true;
                }
            }
        }
        return false;
    }

    function setCookie(cname, cvalue, exdays) {
        const d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        const expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    }

    function getCookie(cname) {
        const name = cname + "=";
        const ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    feather.replace();
</script>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
      integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js"
        integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n"
        crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
        integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
        crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"
        integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"
        crossorigin="anonymous"></script>
<script>
    $("#loginModal").modal();
</script>
</body>

</html>
